module WebSocket (Socket, Event (..), send, new) where

{-| Elm bindings for WebSocket class.

To get started have a look at
[this example](https://github.com/michalj/elm-websocket/tree/master/examples).

# Types

@docs Socket, Event

# Creating a socket

@docs new

# Sending messages

@docs send

-}

import Task exposing (Task)
import Signal exposing (Address)
import Effects exposing (Effects)

import Native.WebSocket

{-| An opaque type representing the WebSocket -}
type Socket = Socket

io : String -> Address String -> Address String -> Address () -> Task String Socket
io = Native.WebSocket.io

{-| Events that can be generated by WebSocket -}
type Event =
  OnClose
  | OnMessage String
  | MessageSent
  | OnError String

{-| Create a new Socket given a url and address that will
receive events.

The effect is either a socket or an error string.
-}
new : String -> Address Event -> Effects (Result String Socket)
new url address =
  io url
    (Signal.forwardTo address OnMessage)
    (Signal.forwardTo address OnError)
    (Signal.forwardTo address (always OnClose))
  |> Task.toResult
  |> Effects.task

{-| Send a message to Socket.
-}
send : Socket -> String -> Effects Event
send socket message = Native.WebSocket.send socket message
  |> Effects.task
  |> Effects.map (always MessageSent)
